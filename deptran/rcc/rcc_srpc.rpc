
namespace rococo;

struct RequestHeader  {
    i32 t_type;     // transaction type
    i32 p_type;     // piece type
    i32 cid;        // coordinator id
    i64 tid;        // transaction id
    i64 pid;        // piece id;
}

struct BatchRequestHeader {
    i32 t_type;
    i32 cid;
    i64 tid;
    i32 num_piece;
    i32 expected_output_size;
}

// struct BatchChopStartResponse {
//    vector<i8> is_defers;
//    vector<map<int32_t, Value>> outputs;
//    GraphMarshaler gra_m;
// }

// struct ChopStartResponse {
//     i8 is_defered;
//     map<i32, Value> output;
//     GraphMarshaler gra_m;
//    string read_only; // for ro6
// }

// struct ChopFinishRequest {
//    i64 txn_id;
//    Graph<TxnInfo> gra;
//    string read_only; // for ro6
//}

//struct ChopFinishResponse {
//    i32 res;
//    vector<pair<RequestHeader, map<i32, Value>>> outputs;
//}

// struct CollectFinishResponse {
//    GraphMarshaler gra_m;
//}

abstract service Rococo {
    // input: contains many pieces, each piece consist of
    // | <i32 p_type> <i64 pid> <i32 input_size> <i32 max_output_size>
    // <input_0> <input_1> ... |
    // output: contains many pieces, each piece consist of
    // | <i32 res> <i32 output_size> <output_0> <output_1> ... |


    // Below is for rococo only

  defer Dispatch(SimpleCommand cmd |
                i32 res,
                map<i32, Value> output,
                RccGraph graph);

  defer Finish(cmdid_t id,
               RccGraph |
               map<uint32_t, map<int32_t, Value>> outputs);

  defer Inquire(cmdid_t txn_id |
                RccGraph res);

  defer rcc_ro_start_pie(SimpleCommand cmd |
                         map<i32, Value> output);

}